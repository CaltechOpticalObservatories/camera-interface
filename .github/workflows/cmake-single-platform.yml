# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "ci-setup" ]
  pull_request:
    branches: [ "ci-setup" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  INTERFACE_TYPE: Archon
  INSTR: generic

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install dependecies
      run: |
        sudo apt-get update
        sudo apt-get install libccfits-dev
        sudo apt-get install libcfitsio-dev
        sudo apt-get install libcurl4-openssl-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cd ${{github.workspace}}/build
        rm -rf * 
        cmake -DINTERFACE_TYPE=${{env.INTERFACE_TYPE}} -DINSTR=${{env.INSTR}} ..

    - name: Build
      # Build your program with the given configuration
      run: |
        cd ${{github.workspace}}/build
        make

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

